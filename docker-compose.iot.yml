version: '3.8'

# Ce fichier dépend du module Core et ajoute les composants IoT vulnérables

networks:
  management_network:
    external: true
    name: cyberlab-light_management_network
  corporate_lan:
    external: true
    name: cyberlab-light_corporate_lan
  iot_network:
    external: true
    name: cyberlab-light_iot_network

services:
  # === Broker MQTT (pour l'IoT) ===
  mqtt_broker:
    image: eclipse-mosquitto:2.0-openssl
    container_name: mqtt_broker
    hostname: mqtt
    # Configuration des ressources pour réduire la consommation
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    volumes:
      - ./mqtt/config:/mosquitto/config
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/log:/mosquitto/log
    ports:
      - "1883:1883"  # MQTT
      - "9001:9001"  # MQTT over WebSockets
    networks:
      - iot_network

  # === Thermostat IoT vulnérable (version légère) ===
  iot_thermostat:
    image: python:3.9-alpine
    container_name: iot_thermostat
    hostname: thermostat
    # Configuration des ressources pour réduire la consommation
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    volumes:
      - ./iot_devices/thermostat:/app
    ports:
      - "8086:5000"
    networks:
      - iot_network
    command: >
      sh -c "pip install --no-cache-dir flask paho-mqtt && 
            python /app/thermostat.py"

  # === Caméra IoT simulée (version légère) ===
  iot_camera:
    image: alpine:latest
    container_name: iot_camera
    hostname: camera
    # Configuration des ressources pour réduire la consommation
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    ports:
      - "8087:8080"
    networks:
      - iot_network
    command: >
      sh -c "apk add --no-cache python3 py3-pip && 
            pip3 install --no-cache-dir flask && 
            echo 'from flask import Flask, Response; app = Flask(__name__); @app.route(\"/\"); def index(): return \"<h1>IoT Camera</h1><p>Status: ONLINE</p>\"; @app.route(\"/stream\"); def stream(): return Response(\"MJPEG Stream simulation\"); app.run(host=\"0.0.0.0\", port=8080)' > /app.py && 
            python3 /app.py"

  # === Passerelle IoT (connecte le réseau IoT au réseau corporatif) ===
  iot_gateway:
    image: python:3.9-alpine
    container_name: iot_gateway
    hostname: gateway
    # Configuration des ressources pour réduire la consommation
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 192M
    volumes:
      - ./iot_devices/gateway:/app
    networks:
      - iot_network
      - corporate_lan
    command: >
      sh -c "pip install --no-cache-dir flask paho-mqtt requests && 
            python /app/gateway.py"
